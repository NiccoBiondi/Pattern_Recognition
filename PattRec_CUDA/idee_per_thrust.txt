
#include <thrust/device_vector.h>
#include <thrust/device_ptr.h>
#include <thrust/host_vector.h>
#include <thrust/generate.h>
#include <thrust/memory.h>

    thrust::host_vector<int> h_a(size);
    thrust::generate(h_a.begin(), h_a.end(), rand);
    thrust::device_vector<int> d_a = h_a;
    int *pr_a  = thrust::raw_pointer_cast(&h_a[0]);
    int *dev_a_ptr = thrust::raw_pointer_cast(&d_a[0]);

    thrust::host_vector<int> h_b(size);
    thrust::generate(h_b.begin(), h_b.end(), rand);
    thrust::device_vector<int> d_b = h_b;
    int *dev_b_ptr = thrust::raw_pointer_cast(&d_b[0]);

    thrust::host_vector<int> h_c(sizeof(int));
    thrust::generate(h_c.begin(), h_c.end(), rand);
    thrust::device_vector<int> d_c = h_c;
    int *dev_c_ptr = thrust::raw_pointer_cast(&d_c[0]);
    //thrust::device_ptr<int> dev_c_ptr = &d_c[0];



    /*printf("\na");
    for(int i=0; i<N; i++) {
        printf("%d ", h_a[i]);
    }

    printf("\n");
    for(int i=0; i<N; i++) {
        printf("%d ", h_b[i]);
    }

    printf("\n\n%d", *dev_c_ptr);
    printf("\n");*/




printf("\n%d", h_a[1]);
    h_a[1] = 10;
    printf("\n%d\n", h_a[1]);
    std::cout << "watch" << *(pr_a+1) << "  then  " << *(pr_a+1) + 100 << std::endl;

    std::cout << "watch" << d_a[1] << "  then  " << d_a[1] + 100 << std::endl;

    std::cout << "watch" << *(dev_a_ptr+1) << "  then  " << *(dev_a_ptr+1) + 100 << std::endl;

        //thrust::copy(d_c.begin(), d_c.end(), h_c.begin());